ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 1.
Hexadecimal [24-Bits]



                                      1 ;;-----------------------------LICENSE NOTICE------------------------------------
                                      2 ;;  This file is part of CPCtelera: An Amstrad CPC Game Engine 
                                      3 ;;  Copyright (C) 2018 ronaldo / Fremos / Cheesetea / ByteRealms (@FranGallegoBR)
                                      4 ;;
                                      5 ;;  This program is free software: you can redistribute it and/or modify
                                      6 ;;  it under the terms of the GNU Lesser General Public License as published by
                                      7 ;;  the Free Software Foundation, either version 3 of the License, or
                                      8 ;;  (at your option) any later version.
                                      9 ;;
                                     10 ;;  This program is distributed in the hope that it will be useful,
                                     11 ;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;  GNU Lesser General Public License for more details.
                                     14 ;;
                                     15 ;;  You should have received a copy of the GNU Lesser General Public License
                                     16 ;;  along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;-------------------------------------------------------------------------------
                                     18 
                                     19 .module sys_util
                                     20 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 2.
Hexadecimal [24-Bits]



                                     21 .include "../common.h.s"
                                      1 ;;-----------------------------LICENSE NOTICE------------------------------------
                                      2 ;;
                                      3 ;;  This program is free software: you can redistribute it and/or modify
                                      4 ;;  it under the terms of the GNU Lesser General Public License as published by
                                      5 ;;  the Free Software Foundation, either version 3 of the License, or
                                      6 ;;  (at your option) any later version.
                                      7 ;;
                                      8 ;;  This program is distributed in the hope that it will be useful,
                                      9 ;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     10 ;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     11 ;;  GNU Lesser General Public License for more details.
                                     12 ;;
                                     13 ;;  You should have received a copy of the GNU Lesser General Public License
                                     14 ;;  along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                     15 ;;-------------------------------------------------------------------------------
                                     16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 3.
Hexadecimal [24-Bits]



                                     17 .include "macros.h.s"
                                      1 ;;-----------------------------LICENSE NOTICE------------------------------------
                                      2 ;;
                                      3 ;;  This program is free software: you can redistribute it and/or modify
                                      4 ;;  it under the terms of the GNU Lesser General Public License as published by
                                      5 ;;  the Free Software Foundation, either version 3 of the License, or
                                      6 ;;  (at your option) any later version.
                                      7 ;;
                                      8 ;;  This program is distributed in the hope that it will be useful,
                                      9 ;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     10 ;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     11 ;;  GNU Lesser General Public License for more details.
                                     12 ;;
                                     13 ;;  You should have received a copy of the GNU Lesser General Public License
                                     14 ;;  along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                     15 ;;-------------------------------------------------------------------------------
                                     16 
                                     17 
                                     18 ;;===============================================================================
                                     19 ;; DEFINED MACROS
                                     20 ;;===============================================================================
                                     21 .mdelete BeginStruct
                                     22 .macro BeginStruct struct
                                     23     struct'_offset = 0
                                     24 .endm
                                     25 
                                     26 .mdelete Field
                                     27 .macro Field struct, field, size
                                     28     struct'_'field = struct'_offset
                                     29     struct'_offset = struct'_offset + size
                                     30 .endm
                                     31 
                                     32 .mdelete EndStruct
                                     33 .macro EndStruct struct
                                     34     sizeof_'struct = struct'_offset
                                     35 .endm
                                     36 
                                     37 ;;===============================================================================
                                     38 ;; Macro
                                     39 ;;
                                     40 ;; Macro modified from cpctelera cpctm_screenPtr_asm
                                     41 ;;===============================================================================
                                     42 
                                     43 .mdelete m_center_screen_ptr 
                                     44 .macro m_center_screen_ptr REG16, VMEM, Y, WIDTH
                                     45    ld REG16, #VMEM + 80 * (Y / 8) + 2048 * (Y & 7) + ((80 - WIDTH)/2)   ;; [3] REG16 = screenPtr
                                     46 .endm
                                     47 
                                     48 ;;===============================================================================
                                     49 ;; MACRO
                                     50 ;;===============================================================================
                                     51 .mdelete ld_de_backbuffer
                                     52 .macro ld_de_backbuffer
                                     53    ld   a, (sys_render_back_buffer)          ;; DE = Pointer to start of the screen
                                     54    ld   d, a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 4.
Hexadecimal [24-Bits]



                                     55    ld   e, #00
                                     56 .endm
                                     57 
                                     58 .mdelete ld_de_frontbuffer
                                     59 .macro ld_de_frontbuffer
                                     60    ld   a, (sys_render_front_buffer)         ;; DE = Pointer to start of the screen
                                     61    ld   d, a
                                     62    ld   e, #00
                                     63 .endm
                                     64 
                                     65 .mdelete m_screenPtr_backbuffer
                                     66 .macro m_screenPtr_backbuffer X, Y
                                     67    push hl
                                     68    ld de, #(80 * (Y / 8) + 2048 * (Y & 7) + X)
                                     69    ld a, (sys_render_back_buffer)
                                     70    ld h, a
                                     71    ld l, #0         
                                     72    add hl, de
                                     73    ex de, hl
                                     74    pop hl
                                     75 .endm
                                     76 
                                     77 .mdelete m_screenPtr_frontbuffer
                                     78 .macro m_screenPtr_frontbuffer X, Y
                                     79    push hl
                                     80    ld de, #(80 * (Y / 8) + 2048 * (Y & 7) + X)
                                     81    ld a, (sys_render_front_buffer)
                                     82    ld h, a
                                     83    ld l, #0         
                                     84    add hl, de
                                     85    ex de, hl
                                     86    pop hl
                                     87 .endm
                                     88 
                                     89 
                                     90 .mdelete m_draw_blank_small_number
                                     91 .macro m_draw_blank_small_number
                                     92    push de
                                     93    push hl
                                     94    ld c, #6
                                     95    ld b, #5
                                     96    ld a, #0                         ;; Patern of solid box
                                     97    call cpct_drawSolidBox_asm
                                     98    pop hl
                                     99    pop de
                                    100 .endm
                                    101 
                                    102 ;;===============================================================================
                                    103 ;; ENTITY DEFINITION MACRO
                                    104 ;;===============================================================================
                                    105 .mdelete DefineEntity
                                    106 .macro DefineEntity _cpms, _ptr, _type, _color, _x, _y, _w, _h, _vxh, _vxl _vyh, _vyl, _sprite, _address, _p_address, _collsion_callback, _ai_callback
                                    107     .dw _ptr
                                    108     .db _cpms
                                    109     .db _type
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 5.
Hexadecimal [24-Bits]



                                    110     .db _color
                                    111     .dw _x
                                    112     .dw _y
                                    113     .db _w
                                    114     .db _h
                                    115     .db _x+_w
                                    116     .db _y+_h
                                    117     .db #0
                                    118     .db #0
                                    119     .db _vxh
                                    120     .db _vxl
                                    121     .db _vyh
                                    122     .db _vyl
                                    123     .dw _sprite
                                    124     .dw _address
                                    125     .dw _p_address
                                    126     .db #0
                                    127     .dw _collsion_callback
                                    128     .db #0
                                    129     .dw _ai_callback
                                    130     .db #1           ;; moved 1 default
                                    131 .endm
                                    132 
                                    133 ;;==============================================================================================================================
                                    134 ;;==============================================================================================================================
                                    135 ;;  MACRO FOR ENUM DEFINITIONS
                                    136 ;;==============================================================================================================================
                                    137 ;;==============================================================================================================================
                                    138 .mdelete DefEnum
                                    139 .macro DefEnum _name
                                    140     _name'_offset = 0
                                    141 .endm
                                    142 
                                    143 ;;  Define enumeration element for an enumeration name.
                                    144 .mdelete Enum
                                    145 .macro Enum _enumname, _element
                                    146     _enumname'_'_element = _enumname'_offset
                                    147     _enumname'_offset = _enumname'_offset + 1
                                    148 .endm
                                    149 
                                    150 ;;==============================================================================================================================
                                    151 ;;==============================================================================================================================
                                    152 ;;  DEFINE LINKED LIST STRUCTURE
                                    153 ;;==============================================================================================================================
                                    154 ;;==============================================================================================================================
                                    155 
                                    156 ;;  Defines the structure for a basic memory manager.
                                    157 .mdelete DefineBasicStructureArray_Size
                                    158 .macro DefineBasicStructureArray_Size _Tname, _N, _ComponentSize
                                    159     _Tname'_array::
                                    160         .ds _N * _ComponentSize
                                    161 .endm
                                    162 
                                    163 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    164 ;;  Defines the structure of the entity array.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 6.
Hexadecimal [24-Bits]



                                    165 .mdelete DefineComponentArrayStructure_Size
                                    166 .macro DefineComponentArrayStructure_Size _Tname, _N, _ComponentSize
                                    167     _Tname'_num::         .db 0
                                    168     _Tname'_list::        .dw nullptr
                                    169     _Tname'_free_list::   .dw _Tname'_array
                                    170     _Tname'_array::
                                    171         .ds _N * _ComponentSize
                                    172 .endm
                                    173 
                                    174 
                                    175 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    176 ;;  Defines the structure for the component handler.
                                    177 .mdelete DefineComponentPointerTable
                                    178 .macro DefineComponentPointerTable _Tname, _N_Cmps, _N
                                    179     _c = 0
                                    180     ;;  Array containing pointers to component pointer arrays.
                                    181     _Tname'_access_table::
                                    182     .rept _N_Cmps
                                    183         DefineComponentPointerAccessTable _Tname, \_c, _N, _N_Cmps
                                    184         _c = _c + 1
                                    185     .endm
                                    186     ;;  Zero-fill the component array with two additional words for the
                                    187     ;;  next free position and a null pointer fot he end of the array.
                                    188     _Tname'_components::
                                    189    .rept _N_Cmps
                                    190         DefineComponentArray _N
                                    191         .dw 0x0000
                                    192         .dw 0x0000
                                    193     .endm
                                    194 .endm
                                    195 
                                    196 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    197 ;;  Defines the pointers of the componente array pointer access table.
                                    198 .mdelete DefineComponentPointerAccessTable
                                    199 .macro DefineComponentPointerAccessTable _Tname, _suf, _N, _N_Cmps
                                    200     _Tname'_components'_suf'_ptr_pend::    .dw . + 2*_N_Cmps+ + _suf*2*_N + 2*_suf
                                    201 .endm
                                    202 
                                    203 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    204 ;;  Zero-pad an array of size n.
                                    205 .mdelete DefineComponentArray
                                    206 .macro DefineComponentArray _N
                                    207     .rept _N
                                    208         .dw 0x0000
                                    209     .endm
                                    210 .endm
                                    211 
                                    212 ;; WinAPE special BRK instruction
                                    213 ;; - more info at http://www.winape.net/help/debug.html
                                    214 .mdelete BREAKPOINT
                                    215 .macro BREAKPOINT
                                    216   .db #0xed, #0xff
                                    217 .endm
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 7.
Hexadecimal [24-Bits]



                                     18 
                                     19 ;;===============================================================================
                                     20 ;; SPRITES
                                     21 ;;===============================================================================
                                     22 .globl _g_palette
                                     23 .globl _s_font_0
                                     24 .globl _s_small_numbers_00
                                     25 .globl _s_small_numbers_01
                                     26 .globl _s_small_numbers_02
                                     27 .globl _s_small_numbers_03
                                     28 .globl _s_small_numbers_04
                                     29 .globl _s_small_numbers_05
                                     30 .globl _s_small_numbers_06
                                     31 .globl _s_small_numbers_07
                                     32 .globl _s_small_numbers_08
                                     33 .globl _s_small_numbers_09
                                     34 
                                     35 
                                     36 ;;===============================================================================
                                     37 ;; CPCTELERA FUNCTIONS
                                     38 ;;===============================================================================
                                     39 .globl cpct_disableFirmware_asm
                                     40 .globl cpct_getScreenPtr_asm
                                     41 .globl cpct_drawSprite_asm
                                     42 .globl cpct_setVideoMode_asm
                                     43 .globl cpct_setPalette_asm
                                     44 .globl cpct_setPALColour_asm
                                     45 .globl cpct_memset_asm
                                     46 .globl cpct_getScreenToSprite_asm
                                     47 .globl cpct_scanKeyboard_asm
                                     48 .globl cpct_scanKeyboard_if_asm
                                     49 .globl cpct_isKeyPressed_asm
                                     50 .globl cpct_waitHalts_asm
                                     51 .globl cpct_drawSolidBox_asm
                                     52 .globl cpct_getRandom_xsp40_u8_asm
                                     53 .globl cpct_setSeed_xsp40_u8_asm
                                     54 .globl cpct_isAnyKeyPressed_asm
                                     55 .globl cpct_setInterruptHandler_asm
                                     56 .globl cpct_waitVSYNC_asm
                                     57 .globl cpct_drawSpriteBlended_asm
                                     58 .globl _cpct_keyboardStatusBuffer
                                     59 .globl cpct_memset_f64_asm
                                     60 .globl cpct_getRandom_mxor_u8_asm
                                     61 .globl cpct_waitVSYNCStart_asm
                                     62 .globl cpct_setSeed_mxor_asm
                                     63 .globl cpct_setVideoMemoryPage_asm
                                     64 .globl cpct_etm_setDrawTilemap4x8_ag_asm
                                     65 .globl cpct_etm_drawTilemap4x8_ag_asm
                                     66 .globl cpct_etm_drawTileBox2x4_asm
                                     67 .globl cpct_px2byteM0_asm
                                     68 
                                     69 
                                     70 ;;===============================================================================
                                     71 ;; DEFINED CONSTANTS
                                     72 ;;===============================================================================
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 8.
Hexadecimal [24-Bits]



                                     73 
                           000016    74 COF                     = #0x0016           ;; Coefficient of Friction
                           000024    75 GRAVITY                 = #0x0024           ;; Gravity
                                     76 
                           000200    77 DASH_IMPULSE            = 0x0200
                           00000A    78 DASH_TIMER              = 10
                                     79 
                           000013    80 STEP_HORIZONTAL_SPEED       = 0x00013
                           000100    81 MAX_HORIZONTAL_SPEED_POS    = 0x0100
                           00FF00    82 MAX_HORIZONTAL_SPEED_NEG    = 0xff00
                                     83 
                           000026    84 STEP_VERTICAL_SPEED       = 0x0026
                           000200    85 MAX_VERTICAL_SPEED_POS    = 0x0200
                           00FE00    86 MAX_VERTICAL_SPEED_NEG    = 0xfe00
                                     87 
                           000016    88 STEP_HORIZONTAL_BALL_SPEED      = 0x0016
                           000100    89 MAX_HORIZONTAL_BALL_SPEED       = 0x0100
                                     90 
                                     91 
                           00000A    92 MAX_ENTITIES = 10
                                     93 
                                     94 
                           000000    95 nullptr = 0x0000
                                     96 
                                     97 ;;==============================================================================================================================
                                     98 ;;==============================================================================================================================
                                     99 ;;  ENTITY TYPE MASKS AND BITS
                                    100 ;;==============================================================================================================================
                                    101 ;;==============================================================================================================================
                           000000   102 e_type_default              = 0x00
                           000001   103 e_type_player               = 0x01
                           000002   104 e_type_ball                 = 0x02
                           000004   105 e_type_wall                 = 0x04
                           000008   106 e_type_mob                  = 0x08
                           000010   107 e_type_shield               = 0x10
                           000020   108 e_type_dead                 = 0x20
                           0000FF   109 e_type_invalid              = 0xff
                                    110 
                                    111 ;;===============================================================================
                                    112 ;;COMPONENT TYPES
                                    113 ;;===============================================================================
                           000000   114 e_cmp          = 0
                           000001   115 e_cmp_alive    = 0x01   ;;entidad renderizable
                           000002   116 e_cmp_render   = 0x02   ;;entidad renderizable
                           000004   117 e_cmp_physics  = 0x04   ;;entidad que se puede mover
                           000008   118 e_cmp_input    = 0x08   ;;entidad controlable por input  
                           000010   119 e_cmp_ai       = 0x10   ;;entidad controlable con ia
                           000020   120 e_cmp_animated = 0x20   ;;entidad animada
                           000040   121 e_cmp_collider = 0x40   ;;entidad que puede colisionar
                           000080   122 e_cmp_collisionable = 0x80   ;;entidad que puede ser colisionada
                           000047   123 e_cmp_paddle = e_cmp_alive | e_cmp_render | e_cmp_physics | e_cmp_collider  ;;componente por defecto
                           000057   124 e_cmp_oponent_paddle = e_cmp_alive | e_cmp_render | e_cmp_physics | e_cmp_collider | e_cmp_ai ;;componente por defecto
                           000087   125 e_cpm_ball = e_cmp_alive | e_cmp_render | e_cmp_physics | e_cmp_collisionable
                           000043   126 e_cmp_border_wall = e_cmp_alive | e_cmp_collider | e_cmp_render
                                    127 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 9.
Hexadecimal [24-Bits]



                                    128 ;;===============================================================================
                                    129 ;;COLISION TYPES
                                    130 ;;===============================================================================
                           000000   131 e_col_null = 0
                           000001   132 e_col_left  = 0x01
                           000002   133 e_col_right = 0x02
                           000004   134 e_col_up    = 0x04
                           000008   135 e_col_down  = 0x08
                                    136 
                                    137 ;;===============================================================================
                                    138 ;; Entity Component IDs
                                    139 ;;===============================================================================
      000000                        140 DefEnum e_cmpID
                           000000     1     e_cmpID_offset = 0
      000000                        141 Enum e_cmpID Render
                           000000     1     e_cmpID_Render = e_cmpID_offset
                           000001     2     e_cmpID_offset = e_cmpID_offset + 1
      000000                        142 Enum e_cmpID Physics
                           000001     1     e_cmpID_Physics = e_cmpID_offset
                           000002     2     e_cmpID_offset = e_cmpID_offset + 1
      000000                        143 Enum e_cmpID AI
                           000002     1     e_cmpID_AI = e_cmpID_offset
                           000003     2     e_cmpID_offset = e_cmpID_offset + 1
      000000                        144 Enum e_cmpID Animation
                           000003     1     e_cmpID_Animation = e_cmpID_offset
                           000004     2     e_cmpID_offset = e_cmpID_offset + 1
      000000                        145 Enum e_cmpID Collision
                           000004     1     e_cmpID_Collision = e_cmpID_offset
                           000005     2     e_cmpID_offset = e_cmpID_offset + 1
      000000                        146 Enum e_cmpID Num_Components
                           000005     1     e_cmpID_Num_Components = e_cmpID_offset
                           000006     2     e_cmpID_offset = e_cmpID_offset + 1
                                    147 
                                    148 
                                    149 
                                    150 ;; Keyboard constants
                           00000A   151 BUFFER_SIZE = 10
                           0000FF   152 ZERO_KEYS_ACTIVATED = #0xFF
                                    153 
                                    154 ;; Score constants
                           000004   155 SCORE_NUM_BYTES = 4
                                    156 
                                    157 ;; SMALL NUMBERS CONSTANTS
                           000002   158 S_SMALL_NUMBERS_WIDTH = 2
                           000005   159 S_SMALL_NUMBERS_HEIGHT = 5
                                    160 ;; Font constants
                           000002   161 FONT_WIDTH = 2
                           000009   162 FONT_HEIGHT = 9
                                    163 
                                    164 
                                    165 ;;===============================================================================
                                    166 ;; ENTITIY SCTRUCTURE CREATION
                                    167 ;;===============================================================================
      000000                        168 BeginStruct e
                           000000     1     e_offset = 0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 10.
Hexadecimal [24-Bits]



      000000                        169 Field e, ptr                , 2
                           000000     1     e_ptr = e_offset
                           000002     2     e_offset = e_offset + 2
      000000                        170 Field e, cmps               , 1
                           000002     1     e_cmps = e_offset
                           000003     2     e_offset = e_offset + 1
      000000                        171 Field e, type               , 1
                           000003     1     e_type = e_offset
                           000004     2     e_offset = e_offset + 1
      000000                        172 Field e, color              , 1
                           000004     1     e_color = e_offset
                           000005     2     e_offset = e_offset + 1
      000000                        173 Field e, x                  , 2
                           000005     1     e_x = e_offset
                           000007     2     e_offset = e_offset + 2
      000000                        174 Field e, y                  , 2
                           000007     1     e_y = e_offset
                           000009     2     e_offset = e_offset + 2
      000000                        175 Field e, w                  , 1
                           000009     1     e_w = e_offset
                           00000A     2     e_offset = e_offset + 1
      000000                        176 Field e, h                  , 1
                           00000A     1     e_h = e_offset
                           00000B     2     e_offset = e_offset + 1
      000000                        177 Field e, end_x              , 1
                           00000B     1     e_end_x = e_offset
                           00000C     2     e_offset = e_offset + 1
      000000                        178 Field e, end_y              , 1
                           00000C     1     e_end_y = e_offset
                           00000D     2     e_offset = e_offset + 1
      000000                        179 Field e, last_x             , 1
                           00000D     1     e_last_x = e_offset
                           00000E     2     e_offset = e_offset + 1
      000000                        180 Field e, last_y             , 1
                           00000E     1     e_last_y = e_offset
                           00000F     2     e_offset = e_offset + 1
      000000                        181 Field e, vx                 , 2
                           00000F     1     e_vx = e_offset
                           000011     2     e_offset = e_offset + 2
      000000                        182 Field e, vy                 , 2
                           000011     1     e_vy = e_offset
                           000013     2     e_offset = e_offset + 2
      000000                        183 Field e, sprite             , 2
                           000013     1     e_sprite = e_offset
                           000015     2     e_offset = e_offset + 2
      000000                        184 Field e, address            , 2
                           000015     1     e_address = e_offset
                           000017     2     e_offset = e_offset + 2
      000000                        185 Field e, p_address          , 2
                           000017     1     e_p_address = e_offset
                           000019     2     e_offset = e_offset + 2
      000000                        186 Field e, collision_status   , 1
                           000019     1     e_collision_status = e_offset
                           00001A     2     e_offset = e_offset + 1
      000000                        187 Field e, collision_callback , 2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 11.
Hexadecimal [24-Bits]



                           00001A     1     e_collision_callback = e_offset
                           00001C     2     e_offset = e_offset + 2
      000000                        188 Field e, ai_status          , 1
                           00001C     1     e_ai_status = e_offset
                           00001D     2     e_offset = e_offset + 1
      000000                        189 Field e, ai_callback        , 2
                           00001D     1     e_ai_callback = e_offset
                           00001F     2     e_offset = e_offset + 2
      000000                        190 Field e, moved              , 1
                           00001F     1     e_moved = e_offset
                           000020     2     e_offset = e_offset + 1
      000000                        191 EndStruct e
                           000020     1     sizeof_e = e_offset
                                    192 
                                    193 ;;===============================================================================
                                    194 ;; GLOBAL VARIABLES
                                    195 ;;===============================================================================
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 12.
Hexadecimal [24-Bits]



                                     22 ;;
                                     23 ;; Start of _DATA area 
                                     24 ;;  SDCC requires at least _DATA and _CODE areas to be declared, but you may use
                                     25 ;;  any one of them for any purpose. Usually, compiler puts _DATA area contents
                                     26 ;;  right after _CODE area contents.
                                     27 ;;
                                     28 .area _DATA
                                     29 
                                     30 
      000000 20 20 20 20 20 20 20    31 string_buffer:: .asciz "          "
             20 20 20 00
                                     32 
                                     33 
                                     34 ;;
                                     35 ;; Start of _CODE area
                                     36 ;; 
                                     37 .area _CODE
                                     38 
                                     39 ;;-----------------------------------------------------------------;; 
                                     40 ;;  sys_util_h_times_e
                                     41 ;;
                                     42 ;; Inputs:
                                     43 ;;   H and E
                                     44 ;; Outputs:
                                     45 ;;   HL is the product
                                     46 ;;   D is 0
                                     47 ;;   A,E,B,C are preserved
                                     48 ;; 36 bytes
                                     49 ;; min: 190cc
                                     50 ;; max: 242cc
                                     51 ;; avg: 216cc
                                     52 ;; Credits:
                                     53 ;;  Z80Heaven (http://z80-heaven.wikidot.com/advanced-math#toc9)
                                     54 
      000000                         55 sys_util_h_times_e::
      000000 16 00            [ 7]   56   ld d,#0
      000002 6A               [ 4]   57   ld l,d
      000003 CB 24            [ 8]   58   sla h 
      000005 30 01            [12]   59   jr nc,.+3 
      000007 6B               [ 4]   60   ld l,e
      000008 29               [11]   61   add hl,hl 
      000009 30 01            [12]   62   jr nc,.+3 
      00000B 19               [11]   63   add hl,de
      00000C 29               [11]   64   add hl,hl 
      00000D 30 01            [12]   65   jr nc,.+3 
      00000F 19               [11]   66   add hl,de
      000010 29               [11]   67   add hl,hl 
      000011 30 01            [12]   68   jr nc,.+3 
      000013 19               [11]   69   add hl,de
      000014 29               [11]   70   add hl,hl 
      000015 30 01            [12]   71   jr nc,.+3 
      000017 19               [11]   72   add hl,de
      000018 29               [11]   73   add hl,hl 
      000019 30 01            [12]   74   jr nc,.+3 
      00001B 19               [11]   75   add hl,de
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 13.
Hexadecimal [24-Bits]



      00001C 29               [11]   76   add hl,hl 
      00001D 30 01            [12]   77   jr nc,.+3 
      00001F 19               [11]   78   add hl,de
      000020 29               [11]   79   add hl,hl 
      000021 D0               [11]   80   ret nc 
      000022 19               [11]   81   add hl,de
      000023 C9               [10]   82   ret
                                     83 
                                     84 ;;-----------------------------------------------------------------;; 
                                     85 ;;  sys_util_hl_div_c
                                     86 ;;
                                     87 ;;Inputs:
                                     88 ;;     HL is the numerator
                                     89 ;;     C is the denominator
                                     90 ;;Outputs:
                                     91 ;;     A is the remainder
                                     92 ;;     B is 0
                                     93 ;;     C is not changed
                                     94 ;;     DE is not changed
                                     95 ;;     HL is the quotient
                                     96 ;;
      000024                         97 sys_util_hl_div_c::
      000024 06 10            [ 7]   98        ld b,#16
      000026 AF               [ 4]   99        xor a
      000027 29               [11]  100          add hl,hl
      000028 17               [ 4]  101          rla
      000029 B9               [ 4]  102          cp c
      00002A 38 02            [12]  103          jr c,.+4
      00002C 2C               [ 4]  104            inc l
      00002D 91               [ 4]  105            sub c
      00002E 10 F7            [13]  106          djnz .-7
      000030 C9               [10]  107        ret
                                    108 
                                    109 ;;-----------------------------------------------------------------
                                    110 ;;
                                    111 ;; sys_util_absHL
                                    112 ;;
                                    113 ;;  
                                    114 ;;  Input:  hl: number
                                    115 ;;  Output: hl: absolut value of number
                                    116 ;;  Destroyed: af
                                    117 ;;
                                    118 ;;  Cemetech code (https://learn.cemetech.net/index.php?title=Z80:Math_Routines#absHL)
                                    119 ;;
      000031                        120 sys_util_absHL::
      000031 CB 7C            [ 8]  121   bit #7,h
      000033 C8               [11]  122   ret z
      000034 AF               [ 4]  123   xor a
      000035 95               [ 4]  124   sub l
      000036 6F               [ 4]  125   ld l,a
      000037 9F               [ 4]  126   sbc a,a
      000038 94               [ 4]  127   sub h
      000039 67               [ 4]  128   ld h,a
      00003A C9               [10]  129   ret
                                    130 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 14.
Hexadecimal [24-Bits]



                                    131 ;;-----------------------------------------------------------------
                                    132 ;;
                                    133 ;; sys_util_BCD_GetEnd
                                    134 ;;
                                    135 ;;  
                                    136 ;;  Input:  b: number of bytes of the bcd number
                                    137 ;;          de: source for the first bcd bnumber
                                    138 ;;          hl: source for the second bcd number
                                    139 ;;  Output: 
                                    140 ;;  Destroyed: af, bc,de, hl
                                    141 ;;
                                    142 ;;  Chibi Akumas BCD code (https://www.chibiakumas.com/z80/advanced.php#LessonA1)
                                    143 ;;
      00003B                        144 sys_util_BCD_GetEnd::
                                    145 ;Some of our commands need to start from the most significant byte
                                    146 ;This will shift HL and DE along b bytes
      00003B C5               [11]  147 	push bc
      00003C 48               [ 4]  148 	ld c,b	;We want to add BC, but we need to add one less than the number of bytes
      00003D 0D               [ 4]  149 	dec c
      00003E 06 00            [ 7]  150 	ld b,#0
      000040 09               [11]  151 	add hl,bc
      000041 EB               [ 4]  152 	ex de, hl	;We've done HL, but we also want to do DE
      000042 09               [11]  153 	add hl,bc
      000043 EB               [ 4]  154 	ex de, hl
      000044 C1               [10]  155 	pop bc
      000045 C9               [10]  156 	ret
                                    157 
                                    158 ;;-----------------------------------------------------------------
                                    159 ;;
                                    160 ;; BCD_Add
                                    161 ;;
                                    162 ;;   Add two BCD numbers
                                    163 ;;  Input:  hl: Number to add to de
                                    164 ;;          de: Number to store the sum 
                                    165 ;;  Output: 
                                    166 ;;  Destroyed: af, bc,de, hl
                                    167 ;;
                                    168 ;;  Chibi Akumas BCD code (https://www.chibiakumas.com/z80/advanced.php#LessonA1)
                                    169 ;;
      000046                        170 sys_util_BCD_Add::
      000046 B7               [ 4]  171     or a
      000047                        172 BCD_Add_Again:
      000047 1A               [ 7]  173     ld a, (de)
      000048 8E               [ 7]  174     adc (hl)
      000049 27               [ 4]  175     daa
      00004A 12               [ 7]  176     ld (de), a
      00004B 13               [ 6]  177     inc de
      00004C 23               [ 6]  178     inc hl
      00004D 10 F8            [13]  179     djnz BCD_Add_Again
      00004F C9               [10]  180     ret
                                    181   
                                    182 ;;-----------------------------------------------------------------
                                    183 ;;
                                    184 ;; sys_util_BCD_Compare
                                    185 ;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 15.
Hexadecimal [24-Bits]



                                    186 ;;  Compare two BCD numbers
                                    187 ;;  Input:  hl: BCD Number 1
                                    188 ;;          de: BCD Number 2
                                    189 ;;  Output: 
                                    190 ;;  Destroyed: af, bc,de, hl
                                    191 ;;
                                    192 ;;  Chibi Akumas BCD code (https://www.chibiakumas.com/z80/advanced.php#LessonA1)
                                    193 ;;
      000050                        194 sys_util_BCD_Compare::
      000050 06 04            [ 7]  195   ld b, #SCORE_NUM_BYTES
      000052 CD 3B 00         [17]  196   call sys_util_BCD_GetEnd
      000055                        197 BCD_cp_direct:
      000055 1A               [ 7]  198   ld a, (de)
      000056 BE               [ 7]  199   cp (hl)
      000057 D8               [11]  200   ret c
      000058 C0               [11]  201   ret nz
      000059 1B               [ 6]  202   dec de
      00005A 2B               [ 6]  203   dec hl
      00005B 10 F8            [13]  204   djnz BCD_cp_direct
      00005D B7               [ 4]  205   or a                    ;; Clear carry
      00005E C9               [10]  206   ret
                                    207 
                                    208 ;;-----------------------------------------------------------------
                                    209 ;;
                                    210 ;; sys_util_get_random_number
                                    211 ;;
                                    212 ;;  Returns a random number between 0 and <end>
                                    213 ;;  Input:  a: <end>
                                    214 ;;  Output: a: random number
                                    215 ;;  Destroyed: af, bc,de, hl
                                    216 
      00005F                        217 sys_util_get_random_number::
      00005F 32 69 00         [13]  218   ld (#random_max_number), a
      000062 CD 00 00         [17]  219   call cpct_getRandom_mxor_u8_asm
      000065 7D               [ 4]  220   ld a, l                             ;; Calculates a pseudo modulus of max number
      000066 26 00            [ 7]  221   ld h,#0                             ;; Load hl with the random number
                           000069   222 random_max_number = .+1
      000068 0E 00            [ 7]  223   ld c, #0                            ;; Load c with the max number
      00006A 06 00            [ 7]  224   ld b, #0
      00006C                        225 _random_mod_loop:
      00006C B7               [ 4]  226   or a                                ;; ??
      00006D ED 42            [15]  227   sbc hl,bc                           ;; hl = hl - bc
      00006F F2 6C 00         [10]  228   jp p, _random_mod_loop              ;; Jump back if hl > 0
      000072 09               [11]  229   add hl,bc                           ;; Adds MAX_MODEL_CARD to hl back to get back to positive values
      000073 7D               [ 4]  230   ld a,l                              ;; loads the normalized random number in a
      000074 C9               [10]  231 ret
                                    232 
                                    233 ;;-----------------------------------------------------------------
                                    234 ;;
                                    235 ;; sys_util_delay
                                    236 ;;
                                    237 ;;  Waits a determined number of frames 
                                    238 ;;  Input:  b: number of frames
                                    239 ;;  Output: 
                                    240 ;;  Destroyed: af, bc
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 16.
Hexadecimal [24-Bits]



                                    241 ;;
      000075                        242 sys_util_delay::
      000075 C5               [11]  243   push bc
      000076 CD 00 00         [17]  244   call cpct_waitVSYNCStart_asm
      000079 C1               [10]  245   pop bc
      00007A 10 F9            [13]  246   djnz sys_util_delay
      00007C C9               [10]  247   ret
                                    248 
                                    249 
                                    250 ;;-----------------------------------------------------------------
                                    251 ;;
                                    252 ;; sys_util_negHL
                                    253 ;;
                                    254 ;;  Negates hl
                                    255 ;;  input: hl
                                    256 ;;  ouput: hl negated
                                    257 ;;  destroys: a
                                    258 ;;
                                    259 ;; WikiTI code (https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Signed_Math)
      00007D                        260 sys_util_negHL::
      00007D AF               [ 4]  261 	xor a
      00007E 95               [ 4]  262 	sub l
      00007F 6F               [ 4]  263 	ld l,a
      000080 9F               [ 4]  264 	sbc a,a
      000081 94               [ 4]  265 	sub h
      000082 67               [ 4]  266 	ld h,a
      000083 C9               [10]  267 	ret
                                    268 
                                    269 ;;-----------------------------------------------------------------
                                    270 ;;
                                    271 ;; sys_util_hl_divided_d
                                    272 ;;
                                    273 ;;  Divides hl by d, and leaves the result in hl
                                    274 ;;  input:  hl: dividend
                                    275 ;;          d: divisor
                                    276 ;;  ouput:  hl: result
                                    277 ;;  destroys: af, de, bc, hl 
                                    278 ;;
                                    279 ;; code by Jonathan Cauldwell (https://chuntey.wordpress.com/category/z80-assembly/)
      000084                        280 sys_util_hl_divided_d::
      000084 06 08            [ 7]  281   ld b,#8              ; bits to check.
      000086 7A               [ 4]  282   ld a,d              ; number by which to divide.
      000087                        283 idiv3:  
      000087 17               [ 4]  284   rla                 ; check leftmost bit.
      000088 38 07            [12]  285   jr c,idiv2          ; no more shifts required.
      00008A 04               [ 4]  286   inc b               ; extra shift needed.
      00008B BC               [ 4]  287   cp h
      00008C 30 03            [12]  288   jr nc,idiv2
      00008E C3 87 00         [10]  289   jp idiv3            ; repeat.
                                    290 
      000091                        291 idiv2:  
      000091 AF               [ 4]  292   xor a
      000092 5F               [ 4]  293   ld e,a
      000093 4F               [ 4]  294   ld c,a              ; result.
      000094                        295 idiv1:  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 17.
Hexadecimal [24-Bits]



      000094 ED 52            [15]  296   sbc hl,de           ; do subtraction.
      000096 30 01            [12]  297   jr nc,idiv0         ; no carry, keep the result.
      000098 19               [11]  298   add hl,de           ; restore original value of hl.
      000099                        299 idiv0: 
      000099 3F               [ 4]  300   ccf                 ; reverse carry bit.
      00009A CB 11            [ 8]  301   rl c                ; rotate in to ac.
      00009C 17               [ 4]  302   rla
      00009D CB 1A            [ 8]  303   rr d                ; divide de by 2.
      00009F CB 1B            [ 8]  304   rr e
      0000A1 10 F1            [13]  305   djnz idiv1          ; repeat.
      0000A3 67               [ 4]  306   ld h,a              ; copy result to hl.
      0000A4 69               [ 4]  307   ld l,c
      0000A5 C9               [10]  308   ret
                                    309 
                                    310 ;;-----------------------------------------------------------------
                                    311 ;;
                                    312 ;; sys_util_sqr_hl
                                    313 ;;
                                    314 ;;  Calculates de square root of hl in a
                                    315 ;;  fast 16 bit isqrt by John Metcalf
                                    316 ;;  92 bytes, 344-379 cycles (average 362)
                                    317 ;;  v2 - saved 3 cycles with a tweak suggested by Russ McNulty
                                    318 ;;  input: hl
                                    319 ;;  ouput: a
                                    320 ;;  destroys: de, hl 
                                    321 ;;
                                    322 ;; code by John Metcalf (https://github.com/impomatic/z80snippets/blob/master/fastisqr.asm)
      0000A6                        323 sys_util_sqr_hl::
                                    324 
      0000A6 7C               [ 4]  325   ld a,h        ; 4
      0000A7 11 C0 B0         [10]  326   ld de,#0x0B0C0  ; 10
      0000AA 83               [ 4]  327   add a,e       ; 4
      0000AB 38 03            [12]  328   jr c,sq7      ; 12 / 7
      0000AD 7C               [ 4]  329   ld a,h        ; 4
      0000AE 16 F0            [ 7]  330   ld d,#0x0F0     ; 7
      0000B0                        331 sq7:
                                    332 
                                    333 ; ----------
                                    334 
      0000B0 82               [ 4]  335   add a,d       ; 4
      0000B1 30 03            [12]  336   jr nc,sq6     ; 12 / 7
      0000B3 CB AA            [ 8]  337   res 5,d       ; 8
      0000B5 FE                     338   .db #254        ; 7
      0000B6                        339 sq6:
      0000B6 92               [ 4]  340   sub d         ; 4
      0000B7 CB 2A            [ 8]  341   sra d         ; 8
                                    342 
                                    343 ; ----------
                                    344 
      0000B9 CB D2            [ 8]  345   set 2,d       ; 8
      0000BB 82               [ 4]  346   add a,d       ; 4
      0000BC 30 03            [12]  347   jr nc,sq5     ; 12 / 7
      0000BE CB 9A            [ 8]  348   res 3,d       ; 8
      0000C0 FE                     349   .db #254        ; 7
      0000C1                        350 sq5:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 18.
Hexadecimal [24-Bits]



      0000C1 92               [ 4]  351   sub d         ; 4
      0000C2 CB 2A            [ 8]  352   sra d         ; 8
                                    353 
                                    354 ; ----------
                                    355 
      0000C4 14               [ 4]  356   inc d         ; 4
      0000C5 82               [ 4]  357   add a,d       ; 4
      0000C6 30 03            [12]  358   jr nc,sq4     ; 12 / 7
      0000C8 CB 8A            [ 8]  359   res 1,d       ; 8
      0000CA FE                     360   .db #254        ; 7
      0000CB                        361 sq4:
      0000CB 92               [ 4]  362   sub d         ; 4
      0000CC CB 2A            [ 8]  363   sra d         ; 8
      0000CE 67               [ 4]  364   ld h,a        ; 4
                                    365 
                                    366 ; ----------
                                    367 
      0000CF 19               [11]  368   add hl,de     ; 11
      0000D0 30 03            [12]  369   jr nc,sq3     ; 12 / 7
      0000D2 1E 40            [ 7]  370   ld e,#0x040     ; 7
      0000D4 D2                     371   .db #210        ; 10
      0000D5                        372 sq3:
      0000D5 ED 52            [15]  373   sbc hl,de     ; 15
      0000D7 CB 2A            [ 8]  374   sra d         ; 8
      0000D9 7B               [ 4]  375   ld a,e        ; 4
      0000DA 1F               [ 4]  376   rra           ; 4
                                    377 
                                    378 ; ----------
                                    379 
      0000DB F6 10            [ 7]  380   or #0x010       ; 7
      0000DD 5F               [ 4]  381   ld e,a        ; 4
      0000DE 19               [11]  382   add hl,de     ; 11
      0000DF 30 03            [12]  383   jr nc,sq2     ; 12 / 7
      0000E1 E6 DF            [ 7]  384   and #0x0DF      ; 7
      0000E3 DA                     385   .db #218        ; 10
      0000E4                        386 sq2:
      0000E4 ED 52            [15]  387   sbc hl,de     ; 15
      0000E6 CB 2A            [ 8]  388   sra d         ; 8
      0000E8 1F               [ 4]  389   rra           ; 4
                                    390 
                                    391 ; ----------
                                    392 
      0000E9 F6 04            [ 7]  393   or #0x04        ; 7
      0000EB 5F               [ 4]  394   ld e,a        ; 4
      0000EC 19               [11]  395   add hl,de     ; 11
      0000ED 30 03            [12]  396   jr nc,sq1     ; 12 / 7
      0000EF E6 F7            [ 7]  397   and #0x0F7      ; 7
      0000F1 DA                     398   .db #218        ; 10
      0000F2                        399 sq1:
      0000F2 ED 52            [15]  400   sbc hl,de     ; 15
      0000F4 CB 2A            [ 8]  401   sra d         ; 8
      0000F6 1F               [ 4]  402   rra           ; 4
                                    403 
                                    404 ; ----------
                                    405 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 19.
Hexadecimal [24-Bits]



      0000F7 3C               [ 4]  406   inc a         ; 4
      0000F8 5F               [ 4]  407   ld e,a        ; 4
      0000F9 19               [11]  408   add hl,de     ; 11
      0000FA 30 02            [12]  409   jr nc,sq0     ; 12 / 7
      0000FC E6 FD            [ 7]  410   and #0x0FD      ; 7
      0000FE                        411 sq0:
      0000FE CB 2A            [ 8]  412   sra d         ; 8
      000100 1F               [ 4]  413   rra           ; 4
      000101 2F               [ 4]  414   cpl           ; 4
                                    415 
      000102 C9               [10]  416 ret
                                    417 
                                    418 
                                    419 
                                    420 ;;-----------------------------------------------------------------
                                    421 ;;
                                    422 ;; sys_util_return_from_sine_table
                                    423 ;;
                                    424 ;;  Returns the number of sine table corresponding to the angle
                                    425 ;;  Input:  hl: angle
                                    426 ;;  Output: hl : sine table result
                                    427 ;;  Destroyed: af, bc
                                    428 ;;
      000103                        429 sys_util_return_from_sine_table::
      000103 01 57 00         [10]  430   ld bc, #87
      000106 B7               [ 4]  431   or a 
      000107 ED 42            [15]  432   sbc hl, bc
      000109 38 04            [12]  433   jr c, _sus_regular_return
      00010B 21 00 01         [10]  434   ld hl, #0x0100
      00010E C9               [10]  435   ret
      00010F                        436 _sus_regular_return:
      00010F 2A 95 01         [16]  437   ld hl, (angle)
      000112 EB               [ 4]  438   ex de, hl
      000113 21 97 01         [10]  439   ld hl, #sine_table
      000116 19               [11]  440   add hl, de
      000117 7E               [ 7]  441   ld a, (hl)
      000118 26 00            [ 7]  442   ld h, #0
      00011A 6F               [ 4]  443   ld l, a
      00011B C9               [10]  444   ret 
                                    445 
                                    446 ;;-----------------------------------------------------------------
                                    447 ;;
                                    448 ;; sys_util_sine::
                                    449 ;;
                                    450 ;;  Waits a determined number of frames 
                                    451 ;;  Input:  a: angle
                                    452 ;;  Output: a : cosine(angle)
                                    453 ;;  Destroyed: af, bc
                                    454 ;;
                                    455 ;;     if (angle < 90) {
                                    456 ;;          return sine_table[angle];
                                    457 ;;     } else if (angle < 180) {
                                    458 ;;          return sine_table[180 - angle];
                                    459 ;;     } else if (angle < 270) {
                                    460 ;;          return -sine_table[angle - 180];
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 20.
Hexadecimal [24-Bits]



                                    461 ;;     } else {
                                    462 ;;          return -sine_table[360 - angle];
                                    463 ;;     }
                                    464 ;;
      00011C                        465 sys_util_sine::
      00011C 22 95 01         [16]  466   ld (angle), hl
      00011F 01 5B 00         [10]  467   ld bc, #91
      000122 B7               [ 4]  468   or a
      000123 ED 42            [15]  469   sbc hl, bc
      000125 38 26            [12]  470   jr c, _sus_return_minus90
      000127 2A 95 01         [16]  471   ld hl, (angle)
      00012A 01 B4 00         [10]  472   ld bc, #180
      00012D B7               [ 4]  473   or a
      00012E ED 42            [15]  474   sbc hl, bc
      000130 38 21            [12]  475   jr c, _sus_return_minus180
      000132 2A 95 01         [16]  476   ld hl, (angle)
      000135 01 0E 01         [10]  477   ld bc, #270
      000138 B7               [ 4]  478   or a
      000139 ED 42            [15]  479   sbc hl, bc
      00013B 38 23            [12]  480   jr c, _sus_return_minus270
      00013D                        481 _sus_return_minus360:
                                    482   ;; calculate 360 - angle
      00013D 2A 95 01         [16]  483   ld hl, (angle)
      000140 11 68 01         [10]  484   ld de, #360
      000143 EB               [ 4]  485   ex de, hl
      000144 B7               [ 4]  486   or a                                  ;; reset carry
      000145 ED 52            [15]  487   sbc hl, de
      000147 CD 03 01         [17]  488   call sys_util_return_from_sine_table
      00014A C3 7D 00         [10]  489   jp sys_util_negHL
      00014D                        490 _sus_return_minus90:
      00014D 2A 95 01         [16]  491   ld hl, (angle)
      000150 C3 03 01         [10]  492   jp sys_util_return_from_sine_table
      000153                        493 _sus_return_minus180:
                                    494   ;; calculate 180 - angle
      000153 2A 95 01         [16]  495   ld hl, (angle)
      000156 11 B4 00         [10]  496   ld de, #180
      000159 EB               [ 4]  497   ex de, hl
      00015A B7               [ 4]  498   or a                                  ;; reset carry
      00015B ED 52            [15]  499   sbc hl, de
      00015D C3 03 01         [10]  500   jp sys_util_return_from_sine_table
      000160                        501 _sus_return_minus270:
                                    502   ;; calculate angle - 180
      000160 2A 95 01         [16]  503   ld hl, (angle)
      000163 11 B4 00         [10]  504   ld de, #180
      000166 B7               [ 4]  505   or a                                  ;; reset carry
      000167 ED 52            [15]  506   sbc hl, de
      000169 CD 03 01         [17]  507   call sys_util_return_from_sine_table
      00016C C3 7D 00         [10]  508   jp sys_util_negHL
                                    509 
                                    510 
                                    511 ;;-----------------------------------------------------------------
                                    512 ;;
                                    513 ;; sys_util_cosine
                                    514 ;;
                                    515 ;;  Waits a determined number of frames 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 21.
Hexadecimal [24-Bits]



                                    516 ;;  Input:  hl: angle
                                    517 ;;  Output: hl : cosine(angle)
                                    518 ;;  Destroyed: af, bc
                                    519 ;;
                                    520 ;;     if (angle <= 90)
                                    521 ;;          return (sine(90 - angle));
                                    522 ;;     else
                                    523 ;;          return (-sine(angle - 90));
                                    524 ;;
      00016F                        525 sys_util_cosine::
      00016F 22 95 01         [16]  526   ld (angle), hl
      000172 11 A6 FF         [10]  527   ld de, #-90
      000175 19               [11]  528   add hl, de
      000176 30 0E            [12]  529   jr nc, suc_more_than_90
                                    530     ;;calculate 90-angle in hl
      000178 11 5A 00         [10]  531     ld de, #90
      00017B 2A 95 01         [16]  532     ld hl, (angle)
      00017E EB               [ 4]  533     ex de, hl
      00017F B7               [ 4]  534     or a
      000180 ED 52            [15]  535     sbc hl, de
      000182 CD 1C 01         [17]  536     call sys_util_sine
      000185 C9               [10]  537     ret
      000186                        538   suc_more_than_90:
                                    539     ;; calculate angle-90 in hl
      000186 2A 95 01         [16]  540     ld hl, (angle)
      000189 11 5A 00         [10]  541     ld de, #90
      00018C B7               [ 4]  542     or a
      00018D ED 52            [15]  543     sbc hl, de
      00018F CD 1C 01         [17]  544     call sys_util_sine
      000192 C3 7D 00         [10]  545     jp sys_util_negHL
                                    546 
      000195 00 00                  547   angle:: .dw #0000
                                    548 
                                    549 
                                    550 
                                    551 ;;-------------------------------------------------------------------
                                    552 ;;
                                    553 ;;  Sine Table
                                    554 ;;
                                    555 ;; The sine table can be stored in bytes, becuase in the first quarter
                                    556 ;; all the sinus are positive an lower than 255.
                                    557 ;; in order to be able to return negative numbers, is necesary to
                                    558 ;; transform the byte into word when returning the information and 
                                    559 ;; have in mind that form 87 to 90 degres should return the word 0100
                                    560 ;;
      000197                        561 sine_table::
      000197 00                     562     .db #0 
      000198 04 09 0D 12 16 1B 1F   563     .db #4,   #9,   #13,  #18,  #22,  #27,  #31,  #36,  #40,  #44
             24 28 2C
      0001A2 31 35 3A 3E 42 47 4B   564     .db #49,  #53,  #58,  #62,  #66,  #71,  #75,  #79,  #83,  #88
             4F 53 58
      0001AC 5C 60 64 68 6C 70 74   565     .db #92,  #96,  #100, #104, #108, #112, #116, #120, #124, #128
             78 7C 80
      0001B6 84 88 8B 8F 93 96 9A   566     .db #132, #136, #139, #143, #147, #150, #154, #158, #161, #165
             9E A1 A5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 22.
Hexadecimal [24-Bits]



      0001C0 A8 AB AF B2 B4 B8 BB   567     .db #168, #171, #175, #178, #180, #184, #187, #190, #193, #196
             BE C1 C4
      0001CA C7 CA CC CF D2 D4 D7   568     .db #199, #202, #204, #207, #210, #212, #215, #217, #219, #222
             D9 DB DE
      0001D4 E0 E2 E4 E6 E8 EA EC   569     .db #224, #226, #228, #230, #232, #234, #236, #237, #239, #241
             ED EF F1
      0001DE F2 F3 F5 F6 F7 F8 F9   570     .db #242, #243, #245, #246, #247, #248, #249, #250, #251, #252
             FA FB FC
      0001E8 FD FE FE FF FF FF      571     .db #253, #254, #254, #255, #255, #255
